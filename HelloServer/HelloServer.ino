#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

const char* ssid = "L04D_57EB8F81";
const char* password = "261DE409";

ESP8266WebServer server(80);

const int led = 13;



// エアコンオフ
unsigned int AirCon_OFF[] = {347,167,42,131,40,128,43,45,44,38,43,45,44,126,44,38,43,45,40,128,43,129,42,43,47,123,43,44,41,43,45,126,43,131,44,38,45,125,43,128,43,45,44,40,41,128,48,38,41,42,48,123,45,42,40,42,45,42,43,40,42,43,45,42,44,38,45,42,45,37,43,45,46,37,42,43,45,41,41,42,43,42,47,39,41,42,47,39,41,42,45,42,40,42,45,42,43,40,45,40,45,42,45,37,42,128,45,42,43,39,45,41,47,38,44,40,45,42,45,123,46,125,46,42,43,40,45,42,43,40,45,40,45,42,45,37,45,42,46,123,48,123,48,38,44,40,45,126,42,42,45,42,43,128,43,39,45,42,43,125,46,42,43,39,45,40,47,37,45,40,47,38,45,40,47,38,45,40,45,42,43,40,44,40,46,42,43,39,46,42,43,40,46,42,43,40,45,40,46,42,43,40,45,40,47,37,45,40,48,37,45,40,45,40,45,40,45,42,43,39,45,39,46,42,43,39,46,42,43,39,46,42,43,39,46,40,45,41,44,39,45,40,48,38,44,40,46,40,44,40,46,40,44,40,45,42,43,39,45,39,46,42,43,39,46,42,43,39,46,42,43,39,46,40,45,40,45,125,46,40,44,40,46,42,43,126,45,39,46,125,46,1328,345,167,46,125,46,125,46,40,45,40,45,40,45,126,45,39,46,42,43,128,43,128,43,39,46,126,44,39,46,40,45,125,45,125,46,40,45,128,43,125,46,42,43,39,46,125,46,42,40,42,46,126,45,39,46,40,48,37,46,40,45,39,46,39,46,40,45,39,46,42,43,40,45,39,46,42,43,39,46,42,43,39,46,42,43,39,46,42,43,40,45,39,46,42,43,39,46,42,43,39,46,42,43,39,46,125,46,39,46,42,43,39,46,40,45,39,46,39,46,125,46,125,46,42,43,39,45,39,46,41,44,39,46,40,45,39,46,40,45,126,45,125,46,42,43,39,46,125,46,41,44,39,46,125,46,39,46,42,42,127,44,39,46,42,43,39,46,40,45,40,45,39,46,40,42,42,46,42,43,39,46,40,43,42,46,39,45,39,45,39,46,42,43,39,46,39,46,39,46,39,46,40,45,39,46,39,45,39,46,42,43,40,45,39,46,40,45,39,46,40,45,39,46,42,43,39,46,42,42,39,46,39,46,42,43,39,46,42,43,39,46,42,43,39,46,42,42,39,46,39,46,42,43,39,46,42,42,39,46,42,42,39,46,40,42,42,46,39,45,40,42,42,46,39,43,42,46,125,46,39,43,42,46,39,46,125,46,39,43,128,43};

// エアコンオン
unsigned int AirCon_ON[]  = {337,171,46,127,44,127,44,44,37,46,39,48,37,129,46,44,37,45,44,127,39,131,39,48,37,131,43,44,37,45,43,127,40,131,39,48,37,134,37,131,39,47,38,46,40,131,39,47,38,46,39,133,38,45,39,48,37,46,39,47,38,46,39,47,38,46,39,48,37,45,39,46,39,48,37,46,39,47,38,46,39,47,38,46,39,47,38,46,39,48,37,47,38,133,38,46,39,47,38,46,39,47,38,46,39,132,39,46,39,47,38,46,39,46,38,46,39,46,38,133,37,132,42,42,38,46,43,43,38,46,42,42,39,48,37,47,38,46,39,132,39,132,39,46,42,42,39,48,41,43,38,48,41,127,39,48,41,42,39,132,39,47,42,42,39,48,37,46,39,46,43,44,37,46,39,48,41,42,39,47,42,42,39,46,38,45,39,46,39,48,37,46,39,48,37,46,43,44,37,46,44,44,37,46,39,48,37,46,39,46,44,44,37,45,44,44,37,45,44,44,37,45,44,44,37,46,39,46,43,44,37,46,43,44,37,45,44,44,37,45,44,44,37,45,44,44,37,46,39,45,44,44,37,45,44,44,37,46,44,44,37,45,44,44,37,46,39,46,43,44,37,45,44,44,37,134,37,45,44,44,37,45,44,44,37,46,39,134,37,134,37,1334,343,171,38,134,37,131,39,47,37,45,44,43,38,133,38,45,44,43,38,132,43,127,43,43,38,132,38,45,39,47,38,134,36,131,39,47,38,132,42,129,38,45,39,48,37,131,39,47,38,45,39,131,40,47,38,45,39,47,38,45,44,44,37,46,43,41,39,46,43,42,39,46,43,42,39,47,38,45,40,48,37,45,44,42,39,46,43,41,39,46,47,38,39,131,39,46,42,41,40,46,39,46,43,42,39,131,39,46,43,42,39,46,43,41,39,48,37,45,44,128,43,127,47,38,39,46,43,41,39,46,41,43,44,42,39,46,47,38,39,132,39,132,39,46,43,41,40,48,37,45,47,38,39,132,39,46,43,42,39,131,39,47,41,43,44,42,39,45,44,42,39,45,44,42,41,43,40,46,39,46,39,45,40,46,41,43,44,42,42,43,44,44,39,43,44,42,41,43,43,41,40,48,39,42,44,44,39,43,44,44,39,42,40,48,39,43,40,46,39,46,42,42,40,48,39,43,44,44,39,42,44,44,39,42,40,46,41,43,40,45,40,48,39,42,44,42,39,45,44,44,39,42,40,48,39,42,40,46,39,46,41,42,40,48,39,43,44,44,39,42,40,48,39,43,40,132,39,45,40,48,39,42,44,44,39,42,40,131,40,131,40};

// エアコンパワフル
unsigned int AirCon_POWER[] = {343,172,45,126,41,128,46,39,38,45,44,44,37,134,37,46,44,44,37,134,37,132,43,44,37,134,37,45,44,43,41,129,37,134,37,46,43,129,42,129,42,41,39,47,42,129,42,42,39,48,37,132,39,47,42,42,39,46,43,44,37,46,43,42,38,48,37,45,43,44,37,46,39,48,37,46,39,48,36,46,39,48,37,46,39,46,39,48,37,45,40,48,36,134,37,45,39,48,37,45,39,48,37,47,38,133,37,46,39,48,37,45,39,47,38,46,39,48,37,133,38,132,39,47,38,46,39,46,38,48,37,47,38,46,39,48,36,46,39,132,39,131,39,48,37,46,39,48,37,47,38,46,39,131,43,45,37,45,40,131,39,48,37,45,39,48,37,47,38,45,44,45,36,45,44,44,37,45,40,48,37,45,40,48,37,45,39,46,39,47,38,45,43,43,38,46,43,43,38,46,39,47,38,45,40,48,37,47,38,46,39,46,39,46,39,46,43,43,38,47,38,46,39,47,38,45,43,43,38,46,43,42,39,45,44,44,37,45,40,48,37,46,39,46,39,48,37,45,44,44,37,134,37,45,40,48,37,45,40,48,37,46,39,45,40,47,38,45,40,47,38,45,40,47,38,133,38,45,40,47,38,46,38,132,38,46,39,132,39,131,40,1335,337,173,40,131,40,131,40,48,37,45,40,48,37,132,39,47,38,45,40,131,39,131,39,46,39,134,37,46,39,46,39,132,39,132,39,46,39,132,39,134,37,45,44,43,38,134,37,45,40,47,38,132,39,46,39,45,40,48,37,45,40,48,37,45,40,48,37,45,40,48,37,46,39,46,39,47,37,45,40,47,38,45,40,47,38,45,40,47,38,45,40,48,37,131,39,46,39,45,39,46,39,46,39,46,39,133,38,45,40,46,39,46,39,46,39,46,39,46,39,132,39,131,39,47,38,45,40,46,39,46,39,48,37,45,40,48,37,45,40,131,39,134,37,45,40,48,37,45,40,48,37,45,40,131,40,46,39,48,37,134,37,45,40,48,37,45,40,48,37,45,40,48,37,46,39,45,40,46,38,45,40,46,39,45,39,46,39,45,40,46,38,45,40,48,37,46,39,45,40,46,39,45,39,46,39,46,39,46,39,46,39,48,37,45,40,45,39,45,40,46,39,46,39,46,39,45,40,46,39,45,40,45,40,48,37,45,40,46,39,45,40,48,37,45,40,46,39,45,40,46,39,131,40,48,37,45,40,48,37,45,40,48,37,45,40,48,37,45,40,46,39,48,37,45,40,131,40,46,39,45,40,48,37,132,39,46,39,132,39,132,39};


int ir_out = 12;
//int led = 13;
int last = 0;
unsigned long us = micros();


void handleRoot() {
  digitalWrite(led, 1);
  server.send(200, "text/plain", "hello from esp8266!");
  digitalWrite(led, 0);
}

void handleNotFound(){
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

void setup(void){
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);

  server.on("/inline", [](){
    digitalWrite(led, 1);
    server.send(200, "text/plain", "this works as well");
    digitalWrite(led, 0);
  });

  server.onNotFound(handleNotFound);

  server.on("/aircon", []() {
    
    digitalWrite(led, 1);
    if(server.args() > 0)
    {
      if(server.argName(0) == "ope")
      {
        if(server.arg(0) == "on")
        {
          Serial.println("on");
          server.send(200, "text/plain", "Required 'on'");
          
          sendSignal(AirCon_ON, sizeof(AirCon_ON) / sizeof(AirCon_ON[0]));
        }
        else if(server.arg(0) == "power")
        {
          Serial.println("power");
          server.send(200, "text/plain", "Required 'power'");

          sendSignal(AirCon_POWER, sizeof(AirCon_POWER) / sizeof(AirCon_POWER[0]));
        }
        else if(server.arg(0) == "off")
        {
          Serial.println("off");
          server.send(200, "text/plain", "Required 'off'");
          
          sendSignal(AirCon_OFF, sizeof(AirCon_OFF) / sizeof(AirCon_OFF[0]));
        }
        else
        {
          server.send(200, "text/plain", "Invalid parameter value.");
        }
      }
      else
      {
        server.send(200, "text/plain", "Invalid parameter name.");
      }
    }
    else
    {
      server.send(200, "text/plain", "Missing parameter.");
    }
    digitalWrite(led, 0);
  });

  server.begin();
  Serial.println("HTTP server started");

  
  pinMode(ir_out, OUTPUT);
}

void loop(void){
  server.handleClient();
}






// dataからリモコン信号を送信
void sendSignal(unsigned int* data, int dataSize) {
  //int dataSize = sizeof(data) / sizeof(data[0]);
  for (int cnt = 0; cnt < dataSize; cnt++) {
    unsigned long len = data[cnt]*10;  // dataは10us単位でON/OFF時間を記録している
    unsigned long us = micros();
    do {
      digitalWrite(ir_out, 1 - (cnt&1)); // cntが偶数なら赤外線ON、奇数ならOFFのまま
      delayMicroseconds(8);  // キャリア周波数38kHzでON/OFFするよう時間調整
      digitalWrite(ir_out, 0);
      delayMicroseconds(7);
    } while (long(us + len - micros()) > 0); // 送信時間に達するまでループ
  }
}



